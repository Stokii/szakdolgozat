---------- SETUP WITH TURBO ----------
npm install -D turbo
package.json -> "workspace": [ "apps/*" ]
npm install -g @nestjs/cli@latest | nestjs telepítése globálisan
mkdir apps 
nest new api | api nevezetű mappába létrehozunk egy új nestjs projektet, "npm"-et választunk
npm create vite@latest client | react + typescript, azután npm install
new file -> turbo.json és bemásoljuk a következő alap struktúrát:
{
    "$schema": "https://turborepo.org/schema.json",
    "pipeline": {
        "dev": {
            "cache": false
        }
    }
}
API | package.json fájlban a start:dev scriptnevet átírjuk simán dev-re, hogy egyezzen a client paranccsával
nestjs | package.json dev script végére beírjuk a következőt: --preserveWatchOutput | elérjük vele, hogy ne törölje a terminált, ha elindult a local dev szerver
turbo | package.json közepére beillesztjük a következő kódot:
"scripts": {
    "dev": "turbo run dev"
},
npm run dev | Mind2 applikáció elindul
client/vite.config.ts | plugins után ezt a kódot kell beilleszteni, hogy kommunikáljon egymással a két app:
server: {
    proxy: {
      '/api': {
        target: 'http://localhost:3000',
        changeOrigin: true
      },
    },
},
api/src/main.ts | app.setGlobalPrefix('api');
turbo.json | beillsztjük ezt a két dolgot is:
"build": {
    "dependsOn": ["^build"],
    "outputs": ["dist/**"]
}

npm run dev | Elindítja az applikációkat
npm run build | Buildeli az appokat

npm install --workspace api @nestjs/serve-static

---------- NEST.JS ----------
app.module.ts | A fő fájl, mint reactben az App.js | Ez vezérel mindent.

---------- DATABASE SETUP ----------
docker-compose.yml tartalma:
version: '3.8'
services:
  dev-db:
    image: postgres:13
    ports: 
      - 5434:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: nest
    networks:
      - szakdolgozat
networks:
  szakdolgozat:

docker ps | megnézni, hogy fut e adatbázis
docker compose up dev-db -d | Adatbázis létrehozása
npx prisma migrate dev | bármi változást eszközölünk a schema.prisma fájlon, ezt lefuttatjuk
DTO (data transfer object) készítés
1:10:16